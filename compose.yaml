services:
  db:
    image: 'postgres:latest'
    container_name: postgres_cars_and_beyond
    env_file:
      - ./entities/.env
    ports:
      - "5432:5432"
    volumes:
      - ./entities/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_cars_and_beyond_data:/var/lib/postgresql/data/
    networks:
      - cars_and_beyond_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d cars_and_beyond -h 127.0.0.1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_cars_and_beyond
    ports:
      - "3333:80"
    env_file:
      - ./entities/.env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin_cars_and_beyond_data:/var/lib/pgadmin
    networks:
      - cars_and_beyond_network

  redis:
    image: 'redis:latest'
    container_name: redis_cars_and_beyond
    ports:
      - "6379:6379"
    volumes:
      - redis_cars_and_beyond_data:/var/lib/data
    networks:
      - cars_and_beyond_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s


  redis_1:
    image: 'redis:latest'
    container_name: redis_1_cars_and_beyond
    ports:
      - "6380:6380"
    command: ["redis-server", "--port", "6380"]
    volumes:
      - redis_1_cars_and_beyond_data:/var/lib/data
    networks:
      - cars_and_beyond_network
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6380", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  entities:
    restart: always
    build:
      context: .
      dockerfile: entities/Dockerfile
    container_name: backend_cars_and_beyond
    command: [ "/bin/bash", "/commands/run_entities_server_dev.sh" ]
    env_file:
      - ./entities/.env
    environment:
      - LOG_LEVEL=debug
      - PYTHONPATH=/usr/entities/fastapi
      - WATCHFILES_FORCE_POLLING=true
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      # redis:
      #   condition: service_healthy
    volumes:
      - ./entities:/usr/entities/fastapi
    networks:
      - cars_and_beyond_network


  minio:
    image: minio/minio:latest
    container_name: minio_cars_and_beyond
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - ./entities/.env
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cars_and_beyond_network

  minio_mc:
    build:
      context: .
      dockerfile: docker/minio_mc/Dockerfile
    container_name: minio_mc_theater
    command: ["/bin/sh", "-c", "/commands/setup_minio.sh"]
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - ./entities/.env
    networks:
      - cars_and_beyond_network


  parsers:
    restart: always
    build:
      context: .
      dockerfile: parsers/Dockerfile
    container_name: parser_cars_and_beyond
    command: [ "/bin/bash", "/commands/run_parsers_server_dev.sh" ]
    env_file:
      - ./parsers/.env
    environment:
      - LOG_LEVEL=debug
      - PYTHONPATH=/usr/parsers/fastapi
      - WATCHFILES_FORCE_POLLING=true
    ports:
      - "8001:8001"
    volumes:
      - ./parsers:/usr/parsers/fastapi
    networks:
      - cars_and_beyond_network


  migrator:
    build:
      context: .
      dockerfile: entities/Dockerfile
    container_name: alembic_migrator_cars_and_beyond
    command: ["/bin/bash", "/commands/run_migration.sh"]
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./entities:/usr/entities/fastapi
    env_file:
      - ./entities/.env
    environment:
      - PYTHONPATH=/usr/entities/fastapi
    networks:
      - cars_and_beyond_network


  celery:
    build: 
      context: .
      dockerfile: entities/Dockerfile
    container_name: celery_cars_and_beyond
    command: ["celery", "-A", "core.celery_config.app", "worker", "--loglevel=info", "-Q", "car_parsing_queue", "--pool=solo"]
    env_file:
      - ./entities/.env
    environment:
      - PYTHONPATH=/usr/entities/fastapi
    depends_on:
      redis_1:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ./entities:/usr/entities/fastapi
    networks:
      - cars_and_beyond_network

  celery_worker:
    build: 
      context: .
      dockerfile: parsers/Dockerfile
    container_name: celery_worker_cars_and_beyond
    command: ["celery", "-A", "tasks.tasks.app", "worker", "--loglevel=info"]
    env_file:
      - ./parsers/.env
    environment:
      - PYTHONPATH=/usr/parsers/fastapi
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ./parsers:/usr/parsers/fastapi
    networks:
      - cars_and_beyond_network

  celery_beat:
    build: 
      context: .
      dockerfile: parsers/Dockerfile
    container_name: celery_beat_cars_and_beyond
    command: ["celery", "-A", "tasks.tasks.app", "beat", "--loglevel=info"]
    env_file:
      - ./parsers/.env
    environment:
      - PYTHONPATH=/usr/parsers/fastapi
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ./parsers:/usr/parsers/fastapi
    networks:
      - cars_and_beyond_network

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: nginx
    restart: always
    ports:
      - "443:443"
    volumes:
      - ./cert.pem:/etc/nginx/certs/cert.pem:ro
      - ./key.pem:/etc/nginx/certs/key.pem:ro
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - entities
    env_file:
      - ./docker/nginx/.env
    networks:
      - cars_and_beyond_network

volumes:
  postgres_cars_and_beyond_data:
    driver: local
  pgadmin_cars_and_beyond_data:
    driver: local
  redis_cars_and_beyond_data:
    driver: local
  redis_1_cars_and_beyond_data:
    driver: local
  minio_data:
    driver: local

networks:
  cars_and_beyond_network:
    driver: bridge