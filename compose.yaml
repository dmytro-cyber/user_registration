services:
  db:
    image: 'postgres:latest'
    container_name: postgres_cars_and_beyond
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_cars_and_beyond_data:/var/lib/postgresql/data/
    networks:
      - cars_and_beyond_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_cars_and_beyond
    ports:
      - "3333:80"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin_cars_and_beyond_data:/var/lib/pgadmin
    networks:
      - cars_and_beyond_network

  redis:
    image: 'redis:latest'
    container_name: redis_cars_and_beyond
    ports:
      - "6379:6379"
    volumes:
      - redis_cars_and_beyond_data:/data
    networks:
      - cars_and_beyond_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  web:
    restart: always
    build: .
    container_name: backend_cars_and_beyond
    command: [ "/bin/bash", "/commands/run_web_server_dev.sh" ]
    env_file:
      - .env
    environment:
      - LOG_LEVEL=debug
      - PYTHONPATH=/usr/src/fastapi
      - WATCHFILES_FORCE_POLLING=true
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/usr/src/fastapi
    networks:
      - cars_and_beyond_network

  migrator:
    build: .
    container_name: alembic_migrator_cars_and_beyond
    command: ["/bin/bash", "/commands/run_migration.sh"]
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src:/usr/src/fastapi
    env_file:
      - .env
    environment:
      - PYTHONPATH=/usr/src/fastapi
    networks:
      - cars_and_beyond_network

  celery_worker:
    build: .
    container_name: celery_worker_cars_and_beyond
    command: ["celery", "-A", "celery_config.app", "worker", "--loglevel=info"]
    env_file:
      - .env
    environment:
      - PYTHONPATH=/usr/src/fastapi
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ./src:/usr/src/fastapi
    networks:
      - cars_and_beyond_network

  celery_beat:
    build: .
    container_name: celery_beat_cars_and_beyond
    command: ["celery", "-A", "celery_config.app", "beat", "--loglevel=info"]
    env_file:
      - .env
    environment:
      - PYTHONPATH=/usr/src/fastapi
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ./src:/usr/src/fastapi
    networks:
      - cars_and_beyond_network

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: nginx
    restart: always
    ports:
      - "443:443"
    volumes:
      - ./cert.pem:/etc/nginx/certs/cert.pem:ro
      - ./key.pem:/etc/nginx/certs/key.pem:ro
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
    env_file:
      - ./docker/nginx/.env
    networks:
      - cars_and_beyond_network

volumes:
  postgres_cars_and_beyond_data:
    driver: local
  pgadmin_cars_and_beyond_data:
    driver: local
  redis_cars_and_beyond_data:
    driver: local

networks:
  cars_and_beyond_network:
    driver: bridge